# This file has been automatically generated by the loadToolsAuto.py script. Don't change it here.

import FreeCAD, FreeCADGui
translate = FreeCAD.Qt.translate

def QT_TRANSLATE_NOOP(context, text):
    return text

import os, sys
import fakemodule
path = os.path.dirname(fakemodule.__file__)
iconPath = os.path.join(path, "Icons")


# ######################################################################################################################
class magicStart():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicStart.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicStart", "magicStart, tool for easier start"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicStart", "This tool was created to make it easier to start designing furniture. It contains some structures that I often use personally, as well as other carpentry solutions suggested by users. However, this tool does not contain a complete list of solutions, because there are too many of them in the world of carpentry, practically every carpenter and manufacturer of furniture or accessories has their own standards. I try to adjust the contents of this tool in such a way that it gives the greatest possible possibilities for later processing and adapting the initial structure to your own needs."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicStart"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicStart", magicStart())

	
# ######################################################################################################################
class panelDefaultXY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultXY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelDefaultXY", "panelDefaultXY, to create simple default panel XY"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelDefaultXY", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultXY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultXY", panelDefaultXY())

	
# ######################################################################################################################
class panelDefaultYX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultYX.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelDefaultYX", "panelDefaultYX, to create simple default panel YX"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelDefaultYX", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultYX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultYX", panelDefaultYX())

	
# ######################################################################################################################
class panelDefaultXZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultXZ.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelDefaultXZ", "panelDefaultXZ, to create simple default panel XZ"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelDefaultXZ", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultXZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultXZ", panelDefaultXZ())

	
# ######################################################################################################################
class panelDefaultZX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultZX.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelDefaultZX", "panelDefaultZX, to create simple default panel ZX"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelDefaultZX", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultZX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultZX", panelDefaultZX())

	
# ######################################################################################################################
class panelDefaultYZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultYZ.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelDefaultYZ", "panelDefaultYZ, to create simple default panel YZ"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelDefaultYZ", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultYZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultYZ", panelDefaultYZ())

	
# ######################################################################################################################
class panelDefaultZY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultZY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelDefaultZY", "panelDefaultZY, to create simple default panel ZY"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelDefaultZY", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultZY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultZY", panelDefaultZY())

	
# ######################################################################################################################
class panelCopyXY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyXY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelCopyXY", "panelCopyXY, to create panel XY from selected object"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelCopyXY", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyXY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyXY", panelCopyXY())

	
# ######################################################################################################################
class panelCopyYX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyYX.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelCopyYX", "panelCopyYX, to create panel YX from selected object"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelCopyYX", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyYX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyYX", panelCopyYX())

	
# ######################################################################################################################
class panelCopyXZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyXZ.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelCopyXZ", "panelCopyXZ, to create panel XZ from selected object"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelCopyXZ", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyXZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyXZ", panelCopyXZ())

	
# ######################################################################################################################
class panelCopyZX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyZX.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelCopyZX", "panelCopyZX, to create panel ZX from selected object"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelCopyZX", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyZX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyZX", panelCopyZX())

	
# ######################################################################################################################
class panelCopyYZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyYZ.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelCopyYZ", "panelCopyYZ, to create panel YZ from selected object"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelCopyYZ", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyYZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyYZ", panelCopyYZ())

	
# ######################################################################################################################
class panelCopyZY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyZY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelCopyZY", "panelCopyZY, to create panel ZY from selected object"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelCopyZY", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyZY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyZY", panelCopyZY())

	
# ######################################################################################################################
class magicMove():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicMove.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicMove", "magicMove, to move or copy panels or other objects"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicMove", "Tool to move, copy and mirror parts of the furniture. This tool also allows to animate move, for example move drawer container."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicMove"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicMove", magicMove())

	
# ######################################################################################################################
class magicAngle():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicAngle.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicAngle", "magicAngle, to rotate objects"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicAngle", "Tool to rotate, for example open furniture fronts. This tool also allows to animate rotations, for example open front."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicAngle"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicAngle", magicAngle())

	
# ######################################################################################################################
class mapPosition():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "mapPosition.png"),
				"MenuText": QT_TRANSLATE_NOOP("mapPosition", "mapPosition, move to 1st selected"),
				"ToolTip" : QT_TRANSLATE_NOOP("mapPosition", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "mapPosition"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("mapPosition", mapPosition())

	
# ######################################################################################################################
class panelMove2Face():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMove2Face.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelMove2Face", "panelMove2Face, move panel to face"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelMove2Face", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMove2Face"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMove2Face", panelMove2Face())

	
# ######################################################################################################################
class panelMove2Anchor():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMove2Anchor.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelMove2Anchor", "panelMove2Anchor, move to anchor"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelMove2Anchor", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMove2Anchor"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMove2Anchor", panelMove2Anchor())

	
# ######################################################################################################################
class panelMove2Center():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMove2Center.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelMove2Center", "panelMove2Center, move to center"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelMove2Center", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMove2Center"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMove2Center", panelMove2Center())

	
# ######################################################################################################################
class shelvesEqual():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "shelvesEqual.png"),
				"MenuText": QT_TRANSLATE_NOOP("shelvesEqual", "shelvesEqual, make equal space between shelves"),
				"ToolTip" : QT_TRANSLATE_NOOP("shelvesEqual", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "shelvesEqual"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("shelvesEqual", shelvesEqual())

	
# ######################################################################################################################
class align2Curve():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "align2Curve.png"),
				"MenuText": QT_TRANSLATE_NOOP("align2Curve", "align2Curve, align panel to curve"),
				"ToolTip" : QT_TRANSLATE_NOOP("align2Curve", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "align2Curve"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("align2Curve", align2Curve())

	
# ######################################################################################################################
class panelMoveXp():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveXp.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelMoveXp", "panelMoveXp, move back"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelMoveXp", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveXp"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveXp", panelMoveXp())

	
# ######################################################################################################################
class panelMoveXm():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveXm.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelMoveXm", "panelMoveXm, move forward"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelMoveXm", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveXm"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveXm", panelMoveXm())

	
# ######################################################################################################################
class panelMoveYp():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveYp.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelMoveYp", "panelMoveYp, move right"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelMoveYp", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveYp"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveYp", panelMoveYp())

	
# ######################################################################################################################
class panelMoveYm():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveYm.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelMoveYm", "panelMoveYm, move left"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelMoveYm", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveYm"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveYm", panelMoveYm())

	
# ######################################################################################################################
class panelMoveZp():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveZp.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelMoveZp", "panelMoveZp, move up"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelMoveZp", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveZp"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveZp", panelMoveZp())

	
# ######################################################################################################################
class panelMoveZm():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveZm.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelMoveZm", "panelMoveZm, move down"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelMoveZm", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveZm"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveZm", panelMoveZm())

	
# ######################################################################################################################
class magicResizer():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicResizer.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicResizer", "magicResizer, smart resizer tool"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicResizer", "This tool allows to resize object via selected edge or to the nearest face of other object."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicResizer"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicResizer", magicResizer())

	
# ######################################################################################################################
class showConstraints():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "showConstraints.png"),
				"MenuText": QT_TRANSLATE_NOOP("showConstraints", "showConstraints, select edges equal to constraints"),
				"ToolTip" : QT_TRANSLATE_NOOP("showConstraints", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "showConstraints"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("showConstraints", showConstraints())

	
# ######################################################################################################################
class panelResize1():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelResize1.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelResize1", "panel, bigger, long+"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelResize1", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelResize1"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelResize1", panelResize1())

	
# ######################################################################################################################
class panelResize2():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelResize2.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelResize2", "panel, smaller, long-"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelResize2", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelResize2"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelResize2", panelResize2())

	
# ######################################################################################################################
class panelResize3():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelResize3.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelResize3", "panel, bigger, short+"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelResize3", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelResize3"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelResize3", panelResize3())

	
# ######################################################################################################################
class panelResize4():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelResize4.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelResize4", "panel, smaller, short-"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelResize4", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelResize4"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelResize4", panelResize4())

	
# ######################################################################################################################
class panelResize5():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelResize5.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelResize5", "panel, bigger, thickness+"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelResize5", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelResize5"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelResize5", panelResize5())

	
# ######################################################################################################################
class panelResize6():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelResize6.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelResize6", "panel, smaller, thickness-"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelResize6", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelResize6"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelResize6", panelResize6())

	
# ######################################################################################################################
class panelFaceXY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceXY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelFaceXY", "panelFaceXY, to create panel XY on selected face"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelFaceXY", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceXY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceXY", panelFaceXY())

	
# ######################################################################################################################
class panelFaceYX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceYX.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelFaceYX", "panelFaceYX, to create panel YX on selected face"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelFaceYX", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceYX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceYX", panelFaceYX())

	
# ######################################################################################################################
class panelFaceXZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceXZ.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelFaceXZ", "panelFaceXZ, to create panel XZ on selected face"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelFaceXZ", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceXZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceXZ", panelFaceXZ())

	
# ######################################################################################################################
class panelFaceZX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceZX.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelFaceZX", "panelFaceZX, to create panel ZX on selected face"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelFaceZX", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceZX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceZX", panelFaceZX())

	
# ######################################################################################################################
class panelFaceYZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceYZ.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelFaceYZ", "panelFaceYZ, to create panel YZ on selected face"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelFaceYZ", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceYZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceYZ", panelFaceYZ())

	
# ######################################################################################################################
class panelFaceZY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceZY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelFaceZY", "panelFaceZY, to create panel ZY on selected face"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelFaceZY", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceZY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceZY", panelFaceZY())

	
# ######################################################################################################################
class panelBetweenXY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenXY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelBetweenXY", "panelBetweenXY, to create panel XY between selected faces"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelBetweenXY", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenXY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenXY", panelBetweenXY())

	
# ######################################################################################################################
class panelBetweenYX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenYX.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelBetweenYX", "panelBetweenYX, to create panel YX between selected faces"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelBetweenYX", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenYX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenYX", panelBetweenYX())

	
# ######################################################################################################################
class panelBetweenXZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenXZ.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelBetweenXZ", "panelBetweenXZ, to create panel XZ between selected faces"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelBetweenXZ", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenXZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenXZ", panelBetweenXZ())

	
# ######################################################################################################################
class panelBetweenZX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenZX.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelBetweenZX", "panelBetweenZX, to create panel ZX between selected faces"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelBetweenZX", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenZX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenZX", panelBetweenZX())

	
# ######################################################################################################################
class panelBetweenYZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenYZ.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelBetweenYZ", "panelBetweenYZ, to create panel YZ between selected faces"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelBetweenYZ", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenYZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenYZ", panelBetweenYZ())

	
# ######################################################################################################################
class panelBetweenZY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenZY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelBetweenZY", "panelBetweenZY, to create panel ZY between selected faces"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelBetweenZY", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenZY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenZY", panelBetweenZY())

	
# ######################################################################################################################
class magicManager():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicManager.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicManager", "magicManager, to create custom panels"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicManager", "If you have problem with unexpected result of face or between Magic Panels, you can use this tool to preview panel before creation. It may take more time to create panel, but you can select exact panel to apply, also the edge and vertex position. This tool allows to create panel at selected face or between two faces."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicManager"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicManager", magicManager())

	
# ######################################################################################################################
class panelSideLeft():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelSideLeft.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelSideLeft", "panelSideLeft, to create side left panel"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelSideLeft", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelSideLeft"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelSideLeft", panelSideLeft())

	
# ######################################################################################################################
class panelSideLeftUP():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelSideLeftUP.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelSideLeftUP", "panelSideLeftUP, to create side left up panel"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelSideLeftUP", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelSideLeftUP"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelSideLeftUP", panelSideLeftUP())

	
# ######################################################################################################################
class panelSideRight():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelSideRight.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelSideRight", "panelSideRight, to create side right panel"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelSideRight", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelSideRight"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelSideRight", panelSideRight())

	
# ######################################################################################################################
class panelSideRightUP():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelSideRightUP.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelSideRightUP", "panelSideRightUP, to create side right up panel"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelSideRightUP", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelSideRightUP"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelSideRightUP", panelSideRightUP())

	
# ######################################################################################################################
class panelBackOut():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBackOut.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelBackOut", "panelBackOut, to create back out panel"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelBackOut", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBackOut"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBackOut", panelBackOut())

	
# ######################################################################################################################
class panelCoverXY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCoverXY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelCoverXY", "panelCoverXY, to create top cover panel"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelCoverXY", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCoverXY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCoverXY", panelCoverXY())

	
# ######################################################################################################################
class panel2profile():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panel2profile.png"),
				"MenuText": QT_TRANSLATE_NOOP("panel2profile", "panel2profile, to create construction profile"),
				"ToolTip" : QT_TRANSLATE_NOOP("panel2profile", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panel2profile"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panel2profile", panel2profile())

	
# ######################################################################################################################
class panel2angle():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panel2angle.png"),
				"MenuText": QT_TRANSLATE_NOOP("panel2angle", "panel2angle, to create construction angle"),
				"ToolTip" : QT_TRANSLATE_NOOP("panel2angle", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panel2angle"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panel2angle", panel2angle())

	
# ######################################################################################################################
class panel2angle45cut():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panel2angle45cut.png"),
				"MenuText": QT_TRANSLATE_NOOP("panel2angle45cut", "panel2angle45cut, to cut construction profile, angle 45 cut"),
				"ToolTip" : QT_TRANSLATE_NOOP("panel2angle45cut", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panel2angle45cut"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panel2angle45cut", panel2angle45cut())

	
# ######################################################################################################################
class panel2frame():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panel2frame.png"),
				"MenuText": QT_TRANSLATE_NOOP("panel2frame", "panel2frame, to convert panels into frame"),
				"ToolTip" : QT_TRANSLATE_NOOP("panel2frame", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panel2frame"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panel2frame", panel2frame())

	
# ######################################################################################################################
class cornerBlock():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "cornerBlock.png"),
				"MenuText": QT_TRANSLATE_NOOP("cornerBlock", "cornerBlock, to create table corner block"),
				"ToolTip" : QT_TRANSLATE_NOOP("cornerBlock", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "cornerBlock"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("cornerBlock", cornerBlock())

	
# ######################################################################################################################
class cornerBrace():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "cornerBrace.png"),
				"MenuText": QT_TRANSLATE_NOOP("cornerBrace", "cornerBrace, to create table corner brace"),
				"ToolTip" : QT_TRANSLATE_NOOP("cornerBrace", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "cornerBrace"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("cornerBrace", cornerBrace())

	
# ######################################################################################################################
class magicDowels():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicDowels.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicDowels", "magicDowels, to add dowels"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicDowels", "This tool allows to add mounting points to the furniture. For example you can easily add dowels or reference points for screws, shelves supporter pins or custom mounting points."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicDowels"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicDowels", magicDowels())

	
# ######################################################################################################################
class panel2link():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panel2link.png"),
				"MenuText": QT_TRANSLATE_NOOP("panel2link", "panel2link, replace selected objects with links"),
				"ToolTip" : QT_TRANSLATE_NOOP("panel2link", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panel2link"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panel2link", panel2link())

	
# ######################################################################################################################
class panel2clone():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panel2clone.png"),
				"MenuText": QT_TRANSLATE_NOOP("panel2clone", "panel2clone, replace selected objects with clones"),
				"ToolTip" : QT_TRANSLATE_NOOP("panel2clone", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panel2clone"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panel2clone", panel2clone())

	
# ######################################################################################################################
class sketch2dowel():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "sketch2dowel.png"),
				"MenuText": QT_TRANSLATE_NOOP("sketch2dowel", "sketch2dowel, dowel from sketch hole and face"),
				"ToolTip" : QT_TRANSLATE_NOOP("sketch2dowel", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "sketch2dowel"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("sketch2dowel", sketch2dowel())

	
# ######################################################################################################################
class edge2dowel():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "edge2dowel.png"),
				"MenuText": QT_TRANSLATE_NOOP("edge2dowel", "edge2dowel, dowel from edge hole"),
				"ToolTip" : QT_TRANSLATE_NOOP("edge2dowel", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "edge2dowel"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("edge2dowel", edge2dowel())

	
# ######################################################################################################################
class magicFixture():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicFixture.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicFixture", "magicFixture, to add fixture"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicFixture", "Allows to add any type of detailed fixture to the furniture. You can create Link or Clone to the realistic looking part."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicFixture"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicFixture", magicFixture())

	
# ######################################################################################################################
class edge2drillbit():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "edge2drillbit.png"),
				"MenuText": QT_TRANSLATE_NOOP("edge2drillbit", "edge2drillbit, drill bit from edge hole"),
				"ToolTip" : QT_TRANSLATE_NOOP("edge2drillbit", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "edge2drillbit"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("edge2drillbit", edge2drillbit())

	
# ######################################################################################################################
class magicJoints():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicJoints.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicJoints", "magicJoints, custom joints based on Sketch"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicJoints", "Allows to move or copy joints created from Sketch pattern and create Mortise and Tenon."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicJoints"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicJoints", magicJoints())

	
# ######################################################################################################################
class jointTenonCut():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "jointTenonCut.png"),
				"MenuText": QT_TRANSLATE_NOOP("jointTenonCut", "jointTenonCut, joint tenon by cut"),
				"ToolTip" : QT_TRANSLATE_NOOP("jointTenonCut", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "jointTenonCut"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("jointTenonCut", jointTenonCut())

	
# ######################################################################################################################
class jointMortiseCut():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "jointMortiseCut.png"),
				"MenuText": QT_TRANSLATE_NOOP("jointMortiseCut", "jointMortiseCut, joint mortise for jointTenonCut"),
				"ToolTip" : QT_TRANSLATE_NOOP("jointMortiseCut", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "jointMortiseCut"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("jointMortiseCut", jointMortiseCut())

	
# ######################################################################################################################
class grainH():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "grainH.png"),
				"MenuText": QT_TRANSLATE_NOOP("grainH", "grainH, grain direction marker, horizontal"),
				"ToolTip" : QT_TRANSLATE_NOOP("grainH", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "grainH"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("grainH", grainH())

	
# ######################################################################################################################
class grainV():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "grainV.png"),
				"MenuText": QT_TRANSLATE_NOOP("grainV", "grainV, grain direction marker, vertical"),
				"ToolTip" : QT_TRANSLATE_NOOP("grainV", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "grainV"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("grainV", grainV())

	
# ######################################################################################################################
class grainX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "grainX.png"),
				"MenuText": QT_TRANSLATE_NOOP("grainX", "grainX, grain direction marker, no grain"),
				"ToolTip" : QT_TRANSLATE_NOOP("grainX", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "grainX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("grainX", grainX())

	
# ######################################################################################################################
class magicCut():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicCut.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicCut", "magicCut, single panel cut by many knives with copies"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicCut", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicCut"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicCut", magicCut())

	
# ######################################################################################################################
class magicKnife():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicKnife.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicKnife", "magicKnife, single knife cut many panels with copies"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicKnife", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicKnife"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicKnife", magicKnife())

	
# ######################################################################################################################
class jointTenonDowel():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "jointTenonDowel.png"),
				"MenuText": QT_TRANSLATE_NOOP("jointTenonDowel", "jointTenonDowel, joint tenon as dowel"),
				"ToolTip" : QT_TRANSLATE_NOOP("jointTenonDowel", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "jointTenonDowel"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("jointTenonDowel", jointTenonDowel())

	
# ######################################################################################################################
class cutTenonDowels():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "cutTenonDowels.png"),
				"MenuText": QT_TRANSLATE_NOOP("cutTenonDowels", "cutTenonDowels, cut all tenon dowels from panel with copies"),
				"ToolTip" : QT_TRANSLATE_NOOP("cutTenonDowels", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "cutTenonDowels"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("cutTenonDowels", cutTenonDowels())

	
# ######################################################################################################################
class magicCorner():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicCorner.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicCorner", "magicCorner, create corner connection"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicCorner", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicCorner"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicCorner", magicCorner())

	
# ######################################################################################################################
class magicCutLinks():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicCutLinks.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicCutLinks", "magicCutLinks, single panel cut by many knives with links (parametric version)"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicCutLinks", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicCutLinks"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicCutLinks", magicCutLinks())

	
# ######################################################################################################################
class magicKnifeLinks():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicKnifeLinks.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicKnifeLinks", "magicKnifeLinks, single knife cut many panels with links (parametric version)"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicKnifeLinks", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicKnifeLinks"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicKnifeLinks", magicKnifeLinks())

	
# ######################################################################################################################
class jointTenonDowelP():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "jointTenonDowelP.png"),
				"MenuText": QT_TRANSLATE_NOOP("jointTenonDowelP", "jointTenonDowelP, joint tenon as dowel (parametric version)"),
				"ToolTip" : QT_TRANSLATE_NOOP("jointTenonDowelP", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "jointTenonDowelP"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("jointTenonDowelP", jointTenonDowelP())

	
# ######################################################################################################################
class cutTenonDowelsP():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "cutTenonDowelsP.png"),
				"MenuText": QT_TRANSLATE_NOOP("cutTenonDowelsP", "cutTenonDowelsP, cut all tenon dowels from panel with links (parametric version)"),
				"ToolTip" : QT_TRANSLATE_NOOP("cutTenonDowelsP", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "cutTenonDowelsP"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("cutTenonDowelsP", cutTenonDowelsP())

	
# ######################################################################################################################
class magicDriller():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicDriller.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicDriller", "magicDriller, to drill holes"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicDriller", "Allows to drill holes, countersinks or counterbores in a series with predefined or custom sequences."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicDriller"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicDriller", magicDriller())

	
# ######################################################################################################################
class drillHoles():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "drillHoles.png"),
				"MenuText": QT_TRANSLATE_NOOP("drillHoles", "drillHoles, drill bit, drill simple holes"),
				"ToolTip" : QT_TRANSLATE_NOOP("drillHoles", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "drillHoles"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("drillHoles", drillHoles())

	
# ######################################################################################################################
class drillCountersinks():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "drillCountersinks.png"),
				"MenuText": QT_TRANSLATE_NOOP("drillCountersinks", "drillCountersinks, drill bit, drill countersinks"),
				"ToolTip" : QT_TRANSLATE_NOOP("drillCountersinks", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "drillCountersinks"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("drillCountersinks", drillCountersinks())

	
# ######################################################################################################################
class drillCounterbores():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "drillCounterbores.png"),
				"MenuText": QT_TRANSLATE_NOOP("drillCounterbores", "drillCounterbores, drill bit, drill counterbores"),
				"ToolTip" : QT_TRANSLATE_NOOP("drillCounterbores", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "drillCounterbores"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("drillCounterbores", drillCounterbores())

	
# ######################################################################################################################
class drillCounterbores2x():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "drillCounterbores2x.png"),
				"MenuText": QT_TRANSLATE_NOOP("drillCounterbores2x", "drillCounterbores2x, drill bit, drill counterbores from both sides"),
				"ToolTip" : QT_TRANSLATE_NOOP("drillCounterbores2x", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "drillCounterbores2x"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("drillCounterbores2x", drillCounterbores2x())

	
# ######################################################################################################################
class magicCNC():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicCNC.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicCNC", "magicCNC, drill bit move machine"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicCNC", "This tool allows to move drill bit at the selected face and drill holes."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicCNC"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicCNC", magicCNC())

	
# ######################################################################################################################
class cutDowels():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "cutDowels.png"),
				"MenuText": QT_TRANSLATE_NOOP("cutDowels", "cutDowels, cut dowels from panel"),
				"ToolTip" : QT_TRANSLATE_NOOP("cutDowels", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "cutDowels"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("cutDowels", cutDowels())

	
# ######################################################################################################################
class routerCove():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "routerCove.png"),
				"MenuText": QT_TRANSLATE_NOOP("routerCove", "routerCove, edge to cove, thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("routerCove", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "routerCove"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("routerCove", routerCove())

	
# ######################################################################################################################
class routerCove2():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "routerCove2.png"),
				"MenuText": QT_TRANSLATE_NOOP("routerCove2", "routerCove2, edge to cove, 1/2 thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("routerCove2", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "routerCove2"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("routerCove2", routerCove2())

	
# ######################################################################################################################
class routerCove4():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "routerCove4.png"),
				"MenuText": QT_TRANSLATE_NOOP("routerCove4", "routerCove4, edge to cove, 1/4 thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("routerCove4", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "routerCove4"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("routerCove4", routerCove4())

	
# ######################################################################################################################
class routerRoundOver():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "routerRoundOver.png"),
				"MenuText": QT_TRANSLATE_NOOP("routerRoundOver", "routerRoundOver, edge to round over, thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("routerRoundOver", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "routerRoundOver"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("routerRoundOver", routerRoundOver())

	
# ######################################################################################################################
class routerRoundOver2():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "routerRoundOver2.png"),
				"MenuText": QT_TRANSLATE_NOOP("routerRoundOver2", "routerRoundOver2, edge to round over, 1/2 thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("routerRoundOver2", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "routerRoundOver2"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("routerRoundOver2", routerRoundOver2())

	
# ######################################################################################################################
class routerRoundOver4():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "routerRoundOver4.png"),
				"MenuText": QT_TRANSLATE_NOOP("routerRoundOver4", "routerRoundOver4, edge to round over, 1/4 thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("routerRoundOver4", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "routerRoundOver4"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("routerRoundOver4", routerRoundOver4())

	
# ######################################################################################################################
class routerStraight2():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "routerStraight2.png"),
				"MenuText": QT_TRANSLATE_NOOP("routerStraight2", "routerStraight2, edge to straight, 1/2 thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("routerStraight2", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "routerStraight2"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("routerStraight2", routerStraight2())

	
# ######################################################################################################################
class routerStraight3():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "routerStraight3.png"),
				"MenuText": QT_TRANSLATE_NOOP("routerStraight3", "routerStraight3, edge to straight, 1/3 thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("routerStraight3", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "routerStraight3"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("routerStraight3", routerStraight3())

	
# ######################################################################################################################
class routerStraight4():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "routerStraight4.png"),
				"MenuText": QT_TRANSLATE_NOOP("routerStraight4", "routerStraight4, edge to straight, 1/4 thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("routerStraight4", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "routerStraight4"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("routerStraight4", routerStraight4())

	
# ######################################################################################################################
class routerChamfer():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "routerChamfer.png"),
				"MenuText": QT_TRANSLATE_NOOP("routerChamfer", "routerChamfer, edge to chamfer, thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("routerChamfer", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "routerChamfer"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("routerChamfer", routerChamfer())

	
# ######################################################################################################################
class routerChamfer2():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "routerChamfer2.png"),
				"MenuText": QT_TRANSLATE_NOOP("routerChamfer2", "routerChamfer2, edge to chamfer, 1/2 thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("routerChamfer2", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "routerChamfer2"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("routerChamfer2", routerChamfer2())

	
# ######################################################################################################################
class routerChamfer4():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "routerChamfer4.png"),
				"MenuText": QT_TRANSLATE_NOOP("routerChamfer4", "routerChamfer4, edge to chamfer, 1/4 thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("routerChamfer4", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "routerChamfer4"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("routerChamfer4", routerChamfer4())

	
# ######################################################################################################################
class multiPocket():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "multiPocket.png"),
				"MenuText": QT_TRANSLATE_NOOP("multiPocket", "multiPocket, multi Sketch to Pocket, thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("multiPocket", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "multiPocket"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("multiPocket", multiPocket())

	
# ######################################################################################################################
class multiPocket2():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "multiPocket2.png"),
				"MenuText": QT_TRANSLATE_NOOP("multiPocket2", "multiPocket2, multi Sketch to Pocket, 1/2 thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("multiPocket2", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "multiPocket2"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("multiPocket2", multiPocket2())

	
# ######################################################################################################################
class multiPocket4():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "multiPocket4.png"),
				"MenuText": QT_TRANSLATE_NOOP("multiPocket4", "multiPocket4, multi Sketch to Pocket, 1/4 thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("multiPocket4", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "multiPocket4"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("multiPocket4", multiPocket4())

	
# ######################################################################################################################
class magicColors():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicColors.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicColors", "magicColors, to add or change colors"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicColors", "This tool allows you to browse colors for manually selected faces or objects and see the effect at 3D model in real-time. Also you can set face colors for all objects from spreadsheet. "),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicColors"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicColors", magicColors())

	
# ######################################################################################################################
class setTextures():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "setTextures.png"),
				"MenuText": QT_TRANSLATE_NOOP("setTextures", "setTextures"),
				"ToolTip" : QT_TRANSLATE_NOOP("setTextures", "This tool allows to store textures information and load textures. Also solves problem with huge project file size because this tool allows to store only link to texture not texture."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "setTextures"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("setTextures", setTextures())

	
# ######################################################################################################################
class makeBeautiful():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "makeBeautiful.png"),
				"MenuText": QT_TRANSLATE_NOOP("makeBeautiful", "makeBeautiful, make all objects more beautiful"),
				"ToolTip" : QT_TRANSLATE_NOOP("makeBeautiful", "This tool change all objects to look better at the picture. It can be used to make better looking screenshot. If you click again all objects will be changed back to default settings."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "makeBeautiful"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("makeBeautiful", makeBeautiful())

	
# ######################################################################################################################
class getDimensions():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "getDimensions.png"),
				"MenuText": QT_TRANSLATE_NOOP("getDimensions", "getDimensions, to create cut-list and BOM"),
				"ToolTip" : QT_TRANSLATE_NOOP("getDimensions", "Creates spreadsheet with dimensions to cut."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "getDimensions"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("getDimensions", getDimensions())

	
# ######################################################################################################################
class sheet2export():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "sheet2export.png"),
				"MenuText": QT_TRANSLATE_NOOP("sheet2export", "sheet2export, to export cut-list"),
				"ToolTip" : QT_TRANSLATE_NOOP("sheet2export", "Exports spreadsheet to chosen file format."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "sheet2export"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("sheet2export", sheet2export())

	
# ######################################################################################################################
class showOccupiedSpace():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "showOccupiedSpace.png"),
				"MenuText": QT_TRANSLATE_NOOP("showOccupiedSpace", "showOccupiedSpace, show occupied space"),
				"ToolTip" : QT_TRANSLATE_NOOP("showOccupiedSpace", "This tool allows you to calculate the overall occupied space in 3D by the selected parts or whole model, if nothing is selected."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "showOccupiedSpace"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("showOccupiedSpace", showOccupiedSpace())

	
# ######################################################################################################################
class magicMeasure():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicMeasure.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicMeasure", "magicMeasure, custom measurement"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicMeasure", "Quick measurement preview on hover or by selection."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicMeasure"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicMeasure", magicMeasure())

	
# ######################################################################################################################
class magicSettings():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicSettings.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicSettings", "magicSettings, tool for Woodworking workbench settings"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicSettings", "This tool allows you to set default settings for Woodworking workbench."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicSettings"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicSettings", magicSettings())

	
# ######################################################################################################################
class selected2LinkGroup():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "selected2LinkGroup.png"),
				"MenuText": QT_TRANSLATE_NOOP("selected2LinkGroup", "selected2LinkGroup, to create container"),
				"ToolTip" : QT_TRANSLATE_NOOP("selected2LinkGroup", "This tool allows you to move selected objects to LinkGroup container."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "selected2LinkGroup"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("selected2LinkGroup", selected2LinkGroup())

	
# ######################################################################################################################
class selected2Link():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "selected2Link.png"),
				"MenuText": QT_TRANSLATE_NOOP("selected2Link", "selected2Link, to create link to container"),
				"ToolTip" : QT_TRANSLATE_NOOP("selected2Link", "This tool allows you to create link to selected objects."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "selected2Link"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("selected2Link", selected2Link())

	
# ######################################################################################################################
class selected2Group():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "selected2Group.png"),
				"MenuText": QT_TRANSLATE_NOOP("selected2Group", "selected2Group, to create folder"),
				"ToolTip" : QT_TRANSLATE_NOOP("selected2Group", "This tool allows you to move selected objects to simple folder."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "selected2Group"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("selected2Group", selected2Group())

	
# ######################################################################################################################
class selected2Assembly():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "selected2Assembly.png"),
				"MenuText": QT_TRANSLATE_NOOP("selected2Assembly", "selected2Assembly, to export to Assembly"),
				"ToolTip" : QT_TRANSLATE_NOOP("selected2Assembly", "This tool allows you to convert selected objects to Assembly."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "selected2Assembly"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("selected2Assembly", selected2Assembly())

	
# ######################################################################################################################
class selected2Outside():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "selected2Outside.png"),
				"MenuText": QT_TRANSLATE_NOOP("selected2Outside", "selected2Outside, to move out from container"),
				"ToolTip" : QT_TRANSLATE_NOOP("selected2Outside", "This tool allows you to move selected objects outside the container and keep global position."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "selected2Outside"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("selected2Outside", selected2Outside())

	
# ######################################################################################################################
class scanObjects():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "scanObjects.png"),
				"MenuText": QT_TRANSLATE_NOOP("scanObjects", "scanObjects, for development"),
				"ToolTip" : QT_TRANSLATE_NOOP("scanObjects", "Inspection tool for FreeCAD macro development & project debug (live API)."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "scanObjects"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("scanObjects", scanObjects())

	
# ######################################################################################################################
class showPlacement():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "showPlacement.png"),
				"MenuText": QT_TRANSLATE_NOOP("showPlacement", "showPlacement, for development"),
				"ToolTip" : QT_TRANSLATE_NOOP("showPlacement", "Allows to see objects anchor placement for selected objects or for all objects, if nothing was selected. Also allows for quick global placement function debugging and further improvements."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "showPlacement"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("showPlacement", showPlacement())

	
# ######################################################################################################################
class debugInfo():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "debugInfo.png"),
				"MenuText": QT_TRANSLATE_NOOP("debugInfo", "debugInfo, to show system info and update Woodworking workbench"),
				"ToolTip" : QT_TRANSLATE_NOOP("debugInfo", "This tool shows installation information and allows to update if there is new version available."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "debugInfo"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("debugInfo", debugInfo())

	
# ######################################################################################################################
class magicGlue():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicGlue.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicGlue", "magicGlue, for parameterization"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicGlue", "This tool allows to add or remove expressions."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicGlue"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicGlue", magicGlue())

	
# ######################################################################################################################
class sketch2clone():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "sketch2clone.png"),
				"MenuText": QT_TRANSLATE_NOOP("sketch2clone", "sketch2clone, to convert sketches to clones"),
				"ToolTip" : QT_TRANSLATE_NOOP("sketch2clone", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "sketch2clone"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("sketch2clone", sketch2clone())

	
# ######################################################################################################################
class showAlias():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "showAlias.png"),
				"MenuText": QT_TRANSLATE_NOOP("showAlias", "showAlias, to show objects with alias"),
				"ToolTip" : QT_TRANSLATE_NOOP("showAlias", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "showAlias"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("showAlias", showAlias())

	
# ######################################################################################################################
class panel2pad():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panel2pad.png"),
				"MenuText": QT_TRANSLATE_NOOP("panel2pad", "panel2pad, to convert panel to object with Sketch"),
				"ToolTip" : QT_TRANSLATE_NOOP("panel2pad", "This tool allows you to convert in-place simple panels Part::Box to PartDesign::Pad objects."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panel2pad"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panel2pad", panel2pad())

	
# ######################################################################################################################
class addExternal():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "addExternal.png"),
				"MenuText": QT_TRANSLATE_NOOP("addExternal", "addExternal, to create external geometry"),
				"ToolTip" : QT_TRANSLATE_NOOP("addExternal", "This tool allows you to create sketch with external geometry from selected faces or edges."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "addExternal"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("addExternal", addExternal())

	
# ######################################################################################################################
class wires2pad():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "wires2pad.png"),
				"MenuText": QT_TRANSLATE_NOOP("wires2pad", "wires2pad, to create panels from wires in Sketch"),
				"ToolTip" : QT_TRANSLATE_NOOP("wires2pad", "This tool allows you to create Pad from each wire in selected Sketches."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "wires2pad"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("wires2pad", wires2pad())

	
# ######################################################################################################################
class fitModel():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "fitModel.png"),
				"MenuText": QT_TRANSLATE_NOOP("fitModel", "fitModel, to view model"),
				"ToolTip" : QT_TRANSLATE_NOOP("fitModel", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "fitModel"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("fitModel", fitModel())

	
# ######################################################################################################################
class makeTransparent():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "makeTransparent.png"),
				"MenuText": QT_TRANSLATE_NOOP("makeTransparent", "makeTransparent, make objects transparent or normal"),
				"ToolTip" : QT_TRANSLATE_NOOP("makeTransparent", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "makeTransparent"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("makeTransparent", makeTransparent())

	
# ######################################################################################################################
class magicView():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicView.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicView", "magicView, create views and export to TechDraw"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicView", "This tool allows you to create views and export views to TechDraw."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicView"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicView", magicView())

	
# ######################################################################################################################
class showVertex():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "showVertex.png"),
				"MenuText": QT_TRANSLATE_NOOP("showVertex", "showVertex, makes vertices more visible"),
				"ToolTip" : QT_TRANSLATE_NOOP("showVertex", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "showVertex"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("showVertex", showVertex())

	
# ######################################################################################################################
class selectVertex():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "selectVertex.png"),
				"MenuText": QT_TRANSLATE_NOOP("selectVertex", "selectVertex, help to select vertices"),
				"ToolTip" : QT_TRANSLATE_NOOP("selectVertex", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "selectVertex"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("selectVertex", selectVertex())

	
# ######################################################################################################################
class roundCurve():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "roundCurve.png"),
				"MenuText": QT_TRANSLATE_NOOP("roundCurve", "roundCurve, render curve precisely"),
				"ToolTip" : QT_TRANSLATE_NOOP("roundCurve", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "roundCurve"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("roundCurve", roundCurve())

	